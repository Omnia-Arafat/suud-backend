{
    "info": {
        "name": "SU'UD API - Complete Collection",
        "description": "Comprehensive API collection for SU'UD Project with automated tests and environment variables",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "suud-api-v1"
    },
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{auth_token}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global pre-request script",
                    "console.log('Starting request to:', pm.request.url.toString());",
                    "",
                    "// Set timestamp for requests",
                    "pm.environment.set('timestamp', new Date().toISOString());"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script",
                    "pm.test('Response time is less than 2000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "",
                    "pm.test('Response has correct Content-Type', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "});"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:8000"
        },
        {
            "key": "api_base",
            "value": "{{base_url}}/api"
        },
        {
            "key": "auth_token",
            "value": ""
        },
        {
            "key": "test_user_email",
            "value": "test@suud-project.com"
        },
        {
            "key": "test_user_password",
            "value": "password123"
        },
        {
            "key": "test_user_name",
            "value": "Test User"
        }
    ],
    "item": [
        {
            "name": "System",
            "description": "System health and information endpoints",
            "item": [
                {
                    "name": "Health Check",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status is OK', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.status).to.eql('OK');",
                                    "});",
                                    "",
                                    "pm.test('Has timestamp', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.timestamp).to.exist;",
                                    "});",
                                    "",
                                    "pm.test('Message contains SU\\'UD', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.message).to.include('SU\\'UD');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base}}/health",
                            "host": ["{{api_base}}"],
                            "path": ["health"]
                        }
                    }
                },
                {
                    "name": "API Information",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Has app name', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.app_name).to.exist;",
                                    "});",
                                    "",
                                    "pm.test('Has version', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.version).to.exist;",
                                    "});",
                                    "",
                                    "pm.test('Has description', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.description).to.exist;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{api_base}}/public/info",
                            "host": ["{{api_base}}"],
                            "path": ["public", "info"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Authentication",
            "description": "User authentication endpoints",
            "item": [
                {
                    "name": "Register User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Registration successful', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('Response has token', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.token).to.exist;",
                                    "    pm.expect(response.data.token_type).to.eql('Bearer');",
                                    "});",
                                    "",
                                    "pm.test('Response has user data', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.user).to.exist;",
                                    "    pm.expect(response.data.user.email).to.eql(pm.environment.get('test_user_email'));",
                                    "});",
                                    "",
                                    "// Save token for future requests",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('auth_token', response.data.token);",
                                    "    pm.environment.set('current_user_id', response.data.user.id);",
                                    "    console.log('Token saved:', response.data.token.substring(0, 10) + '...');",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"{{test_user_name}}\",\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"{{test_user_password}}\",\n    \"password_confirmation\": \"{{test_user_password}}\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base}}/auth/register",
                            "host": ["{{api_base}}"],
                            "path": ["auth", "register"]
                        }
                    }
                },
                {
                    "name": "Login User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Login successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('Response has token', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.token).to.exist;",
                                    "    pm.expect(response.data.token_type).to.eql('Bearer');",
                                    "});",
                                    "",
                                    "// Update token",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('auth_token', response.data.token);",
                                    "    pm.environment.set('current_user_id', response.data.user.id);",
                                    "    console.log('Token updated:', response.data.token.substring(0, 10) + '...');",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"{{test_user_password}}\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base}}/auth/login",
                            "host": ["{{api_base}}"],
                            "path": ["auth", "login"]
                        }
                    }
                },
                {
                    "name": "Get Current User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Request successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('Has user data', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.user).to.exist;",
                                    "    pm.expect(response.data.user.id).to.exist;",
                                    "    pm.expect(response.data.user.email).to.exist;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{api_base}}/auth/me",
                            "host": ["{{api_base}}"],
                            "path": ["auth", "me"]
                        }
                    }
                },
                {
                    "name": "Refresh Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Token refresh successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('New token received', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.token).to.exist;",
                                    "    pm.expect(response.data.token_type).to.eql('Bearer');",
                                    "});",
                                    "",
                                    "// Update token",
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('auth_token', response.data.token);",
                                    "    console.log('Token refreshed:', response.data.token.substring(0, 10) + '...');",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{api_base}}/auth/refresh",
                            "host": ["{{api_base}}"],
                            "path": ["auth", "refresh"]
                        }
                    }
                },
                {
                    "name": "Logout",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Logout successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "// Clear token on successful logout",
                                    "if (pm.response.code === 200) {",
                                    "    pm.environment.unset('auth_token');",
                                    "    pm.environment.unset('current_user_id');",
                                    "    console.log('Token cleared after logout');",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{api_base}}/auth/logout",
                            "host": ["{{api_base}}"],
                            "path": ["auth", "logout"]
                        }
                    }
                }
            ]
        },
        {
            "name": "User Management",
            "description": "User CRUD operations",
            "item": [
                {
                    "name": "List Users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Request successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('Has pagination data', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.current_page).to.exist;",
                                    "    pm.expect(response.data.data).to.be.an('array');",
                                    "    pm.expect(response.data.total).to.exist;",
                                    "});",
                                    "",
                                    "pm.test('Users have required fields', function () {",
                                    "    const response = pm.response.json();",
                                    "    if (response.data.data.length > 0) {",
                                    "        const user = response.data.data[0];",
                                    "        pm.expect(user.id).to.exist;",
                                    "        pm.expect(user.name).to.exist;",
                                    "        pm.expect(user.email).to.exist;",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{api_base}}/users?per_page=10",
                            "host": ["{{api_base}}"],
                            "path": ["users"],
                            "query": [
                                {
                                    "key": "per_page",
                                    "value": "10"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Create User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('User created successfully', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('Created user has correct data', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.name).to.eql('Jane Smith');",
                                    "    pm.expect(response.data.email).to.eql('jane@suud-project.com');",
                                    "});",
                                    "",
                                    "// Save created user ID for other tests",
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    pm.environment.set('created_user_id', response.data.id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane@suud-project.com\",\n    \"password\": \"password123\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base}}/users",
                            "host": ["{{api_base}}"],
                            "path": ["users"]
                        }
                    }
                },
                {
                    "name": "Show User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Request successful', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('User data is correct', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.id).to.exist;",
                                    "    pm.expect(response.data.name).to.exist;",
                                    "    pm.expect(response.data.email).to.exist;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{api_base}}/users/{{created_user_id}}",
                            "host": ["{{api_base}}"],
                            "path": ["users", "{{created_user_id}}"]
                        }
                    }
                },
                {
                    "name": "Update User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('User updated successfully', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "pm.test('Updated data is correct', function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.data.name).to.eql('Jane Doe Updated');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Jane Doe Updated\"\n}"
                        },
                        "url": {
                            "raw": "{{api_base}}/users/{{created_user_id}}",
                            "host": ["{{api_base}}"],
                            "path": ["users", "{{created_user_id}}"]
                        }
                    }
                },
                {
                    "name": "Delete User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('User deleted successfully', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.success).to.be.true;",
                                    "});",
                                    "",
                                    "// Clean up environment variable",
                                    "if (pm.response.code === 200) {",
                                    "    pm.environment.unset('created_user_id');",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{api_base}}/users/{{created_user_id}}",
                            "host": ["{{api_base}}"],
                            "path": ["users", "{{created_user_id}}"]
                        }
                    }
                }
            ]
        }
    ]
}
